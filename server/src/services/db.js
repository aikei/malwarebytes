const { Client } = require('@elastic/elasticsearch');
const config = require('config');
const log = require('../log/log');

const DEFAULT_DATA = require('./defaultData');
const USER_DATA = require('./defaultUsers');

class Db {
  async init() {
    this.client = new Client(config.get('db'));
    let error
    do {
      try {
        error = null
        const resp = await this.client.info().catch(err => {
          throw err
        });
        console.log('info resp:', JSON.stringify(resp));
      } catch(err) {
        error = err
      }
    } while(error);
    this._initDefaultData();
  }

  async getDevices() {
    const resp = await this.client.search({
      index: 'devices',
      body: {
        query: {
          match_all: {}
        },
        size: 1000,
      }
    })
    return resp.body.hits.hits.map((hit) => ({ id: hit._id, ...hit._source }));
  }

  async changeQuantity({ deviceId, changeBy }) {
    const resp = await this.client.update({
      index: 'devices',
      retry_on_conflict: 5,
      id: deviceId,
      body: {
        script: {
          lang: 'painless',
          source: 'ctx._source.quantity += params.by',
          params: {
            by: changeBy
          }
        }
      }
    });
    log.trace('changeQUantity result: %j', resp);
    const resp2 = await this.client.search({
      index: 'devices',
      body: {
        query: {
          term: {
            _id: {
              value: deviceId
            }
          }
        }
      }
    });
    const device = resp2.body.hits.hits[0]._source;
    log.trace('changeQUantity device after resp: %j', resp);
    return device;
  }

  async updateCart({ cart, username }) {
    await this.client.update({
      index: 'users',
      id: username,
      retry_on_conflict: 5,
      body: {
        script: {
          lang: 'painless',
          source: 'ctx._source.cart = params.cart',
          params: {
            cart
          }
        }
      }
    })
  }

  async getCart({ username }) {
    const resp = await this.client.search({
      index: 'users',
      body: {
        query: {
          term: {
            username: {
              value: username
            }
          }
        }
      }
    });
    return resp.body.hits.hits[0] && resp.body.hits.hits[0]._source.cart;
  }

  _initDefaultData() {
    const bulkData = DEFAULT_DATA.reduce((accumulator, value) => {
      accumulator.push({
        index: {
          _index: 'devices',
          _id: value.name.toLowerCase().replace(/ /g, '_')
        }
      })
      accumulator.push(value);
      return accumulator
    }, [])
    const arg = {
      body: bulkData
    }
    log.trace('bulk arg: %j', arg);
    this.client.bulk(arg);
    const bulkUserData = USER_DATA.reduce((accumulator, value) => {
      accumulator.push({
        index: {
          _index: 'users',
          _id: value.username
        }
      })
      accumulator.push(value);
      return accumulator;
    }, [])
    this.client.bulk({
      body: bulkUserData
    })
    // this.client.index({
    //   id: 'phone_iphone_11',
    //   index: 'devices',
    //   body: {
    //     type: 'phone',
    //     name: 'Apple Iphone 11'
    //   }
    // })
  }
}

module.exports = new Db();