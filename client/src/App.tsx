import React from 'react';
import './App.css';
import Devices from './devices/Devices';
import Header from './header/Header';
import Modal from './modal/Modal';

import { io } from 'socket.io-client'
import { useDispatch, useSelector } from 'react-redux'

import { quantityChanged } from './store/devicesSlice'
import { State } from './store/store';
import { updateCart } from './store/cartSlice'
import axios from 'axios';
import ModalMessages from './modal/ModalMessages';
import { addModalMessage } from './store/modalSlice';
import LoadingSpinner from './spinner/LoadingSpinner';
import { logIn } from './store/infoSlice';

const App: React.FC = () => {

  const dispatch = useDispatch();
  const accessToken = useSelector<State, string>((state) => state.info.accessToken);

  React.useEffect(() => {
    dispatch(logIn());
  }, []);

  React.useEffect(() => {
    if (accessToken) {
      axios.interceptors.request.use((config: any) => {
        config.headers.Authorization = accessToken;
        return config;
      });
      const socket = io({
        extraHeaders: {
          Authorization: accessToken,
        }
      });
  
      axios.get('/devices/cart').then((resp) => {
        dispatch(updateCart(resp.data));
      });
  
      socket.on('connect', () => {
        console.log('connected');
      });
  
      socket.on('quantityUpdated', ({ device, changeBy, id }) => {
        dispatch(quantityChanged({ id: device.id, by: changeBy }));
        if (id !== accessToken) {
          let message = ''
          if (changeBy < 0) {
            message = `${device.name} quantity decreased by ${-changeBy}`;
          } else {
            message = `${device.name} quantity increased by ${changeBy}`;
          }
          const title = 'Someone changed the data:'
          dispatch(addModalMessage({ message, title }));
        }
      });
  
      socket.on('cartUpdated', ({ cart, id }) => {
        dispatch(updateCart(cart));
      });
    }
  }, [accessToken])

  return (
    <div className="App">
      <Header />
      <Devices />
      <Modal />
      <ModalMessages />
      <LoadingSpinner />
    </div>
  );
}

export default App;
