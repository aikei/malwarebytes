import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import axios from 'axios';

export const fetchDevices = createAsyncThunk('devices/fetch', async () => {
  const resp = await axios.get('/devices/all');
  return resp.data;
});

export const changeQuantity = createAsyncThunk<any,any>('devices/change_quantity', async ({ deviceId, changeBy }) => {
  const resp = await axios.post('/devices/changeQuantity', {
    deviceId, changeBy
  });
  return resp.data;
});

const initialState: {
  loading: boolean,
  loadError: string,
  devices: {
    index: number,
    type: string,
    id: string,
    name: string,
    description: string,
    quantity: number,
    price: number,
  }[],
  quantities: {[id: string]: number}
} = {
  loading: false,
  loadError: "",
  devices: [],
  quantities: {},
}

const devicesSlice = createSlice({
  name: 'devices',
  initialState,
  reducers: {
    quantityChanged(state, action) {
      if (state.quantities[action.payload.id] !== undefined) {
        state.quantities[action.payload.id] += action.payload.by;
      }
    },
  },
  extraReducers(builder) {
    builder
      .addCase(fetchDevices.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(fetchDevices.fulfilled, (state, action) => {
        state.loading = false;
        state.devices = action.payload;
        state.devices.sort((a,b) => a.index-b.index);
        for (const d of state.devices) {
          state.quantities[d.id] = d.quantity;
        }
      })
      .addCase(fetchDevices.rejected, (state, action) => {
        state.loading = false;
        state.loadError = (action.payload as Error).message;
      })
  }
});

export const { quantityChanged } = devicesSlice.actions;

export type DevicesStateType = typeof initialState;

export default devicesSlice.reducer;
